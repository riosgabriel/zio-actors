version: 2.1

scala_212: &scala_212
  SCALA_VERSION: 2.12.12

scala_213: &scala_213
  SCALA_VERSION: 2.13.3

jdk_8: &jdk_8
  JDK_VERSION: 8

machine_ubuntu: &machine_ubuntu
  machine:
    image: ubuntu-1604:201903-01

commands:
  save-cache:
    parameters:
    steps:
      - save_cache:
          key: sbt-actors-{{ .Environment.CACHE_VERSION }}-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum "build.sbt" }}
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.m2"
            - "~/.cache"
            - "~/website/node_modules"

  load-cache:
    steps:
      - restore_cache:
          keys:
            - sbt-actors-{{ .Environment.CACHE_VERSION }}-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ checksum "build.sbt" }}
            - sbt-actors-{{ .Environment.CACHE_VERSION }}-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-
            - sbt-actors-{{ .Environment.CACHE_VERSION }}-{{ .Environment.CIRCLE_JOB }}-master-

  clean-cache:
    steps:
      - run:
          name: Clean unwanted files from cache
          command: |
            rm -fv $HOME/.ivy2/.sbt.ivy.lock
            find $HOME/.ivy2/cache -name "ivydata-*.properties" -print -delete
            find $HOME/.sbt        -name "*.lock"               -print -delete

  install_nodejs:
    steps:
      - run:
          name: Install node.js
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install
            nvm use
            node -v

  install_yarn:
    steps:
      - run:
          name: Install Yarn
          command: |
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 78BD65473CB3BD13
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5DC22404A6F9F1CA
            curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            sudo bash -c 'echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list'
            sudo apt update && sudo apt install yarn -y
            yarn policies set-version
            yarn -v

filter_tags: &filter_tags
  tags:
    only: /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/`

release: &release
  steps:
      - checkout
      - run:
          name: Fetch git tags
          command: git fetch --tags
      - load-cache
      - run: 
          name: Write sonatype credentials
          command: echo "credentials += Credentials(\"Sonatype Nexus Repository Manager\", \"oss.sonatype.org\", \"${SONATYPE_USER}\", \"${SONATYPE_PASSWORD}\")" > ~/.sbt/1.0/sonatype.sbt
      - run:
          name: Write PGP public key
          command: echo -n "${PGP_PUBLIC}" | base64 -di > /tmp/public.asc
      - run:
          name: Write PGP secret key
          command: echo -n "${PGP_SECRET}" | base64 -di > /tmp/secret.asc
      - run:
          name: Release artifacts
          command: |
            mkdir -p $HOME/bin
            sudo apt-get update && sudo apt-get -y install gnupg2
            echo pinentry-mode loopback >> ~/.gnupg/gpg.conf
            echo allow-loopback-pinentry >> ~/.gnupg/gpg-agent.conf
            chmod 600 ~/.gnupg/*
            ln -s /usr/bin/gpg2 $HOME/bin/gpg
            $HOME/bin/gpg --version
            echo RELOADAGENT | gpg-connect-agent
            echo $PGP_SECRET | base64 -di | gpg2 --import --no-tty --batch --yes
            PATH=$HOME/bin:$PATH ./sbt ++${SCALA_VERSION}! ci-release

microsite: &microsite
  steps:
      - add_ssh_keys:
          fingerprints:
            - "d5:5f:d3:70:34:b3:1e:0e:fb:63:97:fa:63:63:b0:8a"
      - attach_workspace:
          at: ~/
      - load-cache
      - install_nodejs
      - install_yarn
      - run:
          name: Publishing website
          command: |
            git config --global user.email "${GH_NAME}@users.noreply.github.com"
            git config --global user.name "${GH_NAME}"
            export GIT_USER=${GH_NAME}
            export TRAVIS_BUILD_NUMBER="${CIRCLE_BUILD_NUM}"
            export TRAVIS_COMMIT="${CIRCLE_SHA1}"
            sudo chown -R $USER:$USER /tmp
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install
            nvm use
            node -v
            ./sbt ++${SCALA_VERSION}! docs/docusaurusCreateSite
            ./sbt ++${SCALA_VERSION}! docs/docusaurusPublishGhpages
      - clean-cache
      - save-cache

jobs:
  lint:
    resource_class: small
    environment:
      - <<: *scala_213
    docker:
      - image: circleci/openjdk:8
    steps:
      - checkout
      - load-cache
      - run:
          name: Lint code
          command: |
            ./sbt reload
            ./sbt ++${SCALA_VERSION}! check
      - save-cache
      - persist_to_workspace:
          root: ~/
          paths:
            - project/
            - .sbt/

  test:
    parameters:
      scala:
        type: string
      jdk:
        type: string
    resource_class: small
    docker:
      - image: circleci/openjdk:<< parameters.jdk >>
    steps:
      - attach_workspace:
          at: ~/
      - load-cache
      - run:
          name: Run tests
          command: |
            ./sbt reload
            ./sbt ++<< parameters.scala >>! test
      - save-cache
      

  mdoc:
    resource_class: small
    environment:
      - <<: *scala_213
    docker:
      - image: circleci/openjdk:8
    steps:
      - attach_workspace:
          at: ~/
      - load-cache
      - run:
          name: Generate documentation
          command: |
            ./sbt doc
            ./sbt ++${SCALA_VERSION}! docs/mdoc
      - save-cache

  release:
    <<: *release
    <<: *machine_ubuntu
    environment:
      - <<: *scala_213
      - <<: *jdk_8

  microsite:
    <<: *microsite
    <<: *machine_ubuntu
    environment:
      - <<: *scala_213
      - <<: *jdk_8

workflows:
  version: 2
  build:
    jobs:
      - lint:
          filters:
            <<: *filter_tags

      - test:
          name: test-scala-<< matrix.scala >>-jdk-<< matrix.jdk >>
          matrix:
            parameters:
              scala: ["2.12.11", "2.13.3"]
              jdk: ["8", "11"]
          requires:
            - lint
          filters:
            <<: *filter_tags

      - mdoc:
          requires:
            - test
          filters:
            <<: *filter_tags

      - release:
          context: Sonatype2
          requires:
            - test
            - mdoc
          filters:
            <<: *filter_tags
            branches:
              only:
                - master

      - microsite:
          context: Website
          requires:
            - release
          filters:
            <<: *filter_tags
            branches:
              ignore: /.*/
